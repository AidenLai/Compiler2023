Terminals unused in grammar

   CHAR
   DEFAULT
   DO


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 $@2: %empty

    3 program: $@1 declarations $@2 statements

    4 statements: statements statement
    5           | %empty

    6 statement: block
    7          | simple
    8          | condition
    9          | loop

   10 declarations: declarations declaration_function
   11             | %empty

   12 declaration_function: declaration
   13                     | function
   14                     | procedure

   15 declaration: constants
   16            | variable
   17            | array

   18 constants: CONST IDENTIFIER type ASSIGN constant_exp
   19          | CONST IDENTIFIER ASSIGN constant_exp

   20 type: ':' INT
   21     | ':' REAL
   22     | ':' BOOL
   23     | ':' STRING

   24 constant_exp: INT_NUM
   25             | REAL_NUM
   26             | STRING_CONSTANTS
   27             | TRUE
   28             | FALSE

   29 variable: VAR IDENTIFIER type ASSIGN constant_exp
   30         | VAR IDENTIFIER type
   31         | VAR IDENTIFIER ASSIGN constant_exp

   32 array: ARRAY IDENTIFIER ':' ARRAY number '.' '.' number OF type

   33 number: INT_NUM
   34       | IDENTIFIER

   35 $@3: %empty

   36 $@4: %empty

   37 function: FUNCTION IDENTIFIER $@3 '(' parameters_block ')' type $@4 function_bodys END IDENTIFIER

   38 $@5: %empty

   39 $@6: %empty

   40 procedure: PROCEDURE IDENTIFIER $@5 '(' parameters_block ')' $@6 function_bodys END IDENTIFIER

   41 function_bodys: function_bodys function_body
   42               | %empty

   43 function_body: declaration
   44              | statement

   45 parameters_block: parameters
   46                 | %empty

   47 parameters: parameters ',' parameter
   48           | parameter

   49 parameter: IDENTIFIER type

   50 $@7: %empty

   51 block: BEGIN_ $@7 function_bodys END

   52 simple: IDENTIFIER ASSIGN expression

   53 $@8: %empty

   54 simple: PUT $@8 expression
   55       | GET IDENTIFIER
   56       | RESULT expression
   57       | RETURN
   58       | EXIT when
   59       | SKIP
   60       | function_procedure

   61 when: WHEN expression
   62     | %empty

   63 expression: expression '+' expression
   64           | expression '-' expression
   65           | expression '*' expression
   66           | expression '/' expression
   67           | expression MOD expression
   68           | '-' expression
   69           | expression AND expression
   70           | expression OR expression
   71           | NOT expression
   72           | expression '<' expression
   73           | expression LE expression
   74           | expression '=' expression
   75           | expression GE expression
   76           | expression '>' expression
   77           | expression NOT_EQU expression
   78           | '(' expression ')'
   79           | IDENTIFIER
   80           | constant_exp
   81           | function_procedure
   82           | array_reference

   83 function_procedure: IDENTIFIER '(' argument_body ')'

   84 array_reference: IDENTIFIER '[' expression ']'

   85 argument_body: arguments
   86              | %empty

   87 arguments: arguments ',' func_expression
   88          | func_expression

   89 func_expression: expression

   90 $@9: %empty

   91 if_head: IF expression THEN $@9 function_bodys

   92 $@10: %empty

   93 condition: if_head ELSE $@10 function_bodys END IF
   94          | if_head END IF

   95 $@11: %empty

   96 loop: LOOP $@11 function_bodys END LOOP

   97 $@12: %empty

   98 $@13: %empty

   99 $@14: %empty

  100 $@15: %empty

  101 $@16: %empty

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number $@14 '.' '.' number $@15 function_bodys $@16 END FOR

  103 decreasing: DECREASING
  104           | %empty


Terminals, with rules where they appear

$end (0) 0
'(' (40) 37 40 78 83
')' (41) 37 40 78 83
'*' (42) 65
'+' (43) 63
',' (44) 47 87
'-' (45) 64 68
'.' (46) 32 102
'/' (47) 66
':' (58) 20 21 22 23 32 102
'<' (60) 72
'=' (61) 74
'>' (62) 76
'[' (91) 84
']' (93) 84
error (256)
ARRAY (258) 32
BEGIN_ (259) 51
BOOL (260) 22
CHAR (261)
CONST (262) 18 19
DECREASING (263) 103
DEFAULT (264)
DO (265)
ELSE (266) 93
END (267) 37 40 51 93 94 96 102
EXIT (268) 58
FALSE (269) 28
FOR (270) 102
FUNCTION (271) 37
GET (272) 55
IF (273) 91 93 94
INT (274) 20
LOOP (275) 96
OF (276) 32
PUT (277) 54
PROCEDURE (278) 40
REAL (279) 21
RESULT (280) 56
RETURN (281) 57
SKIP (282) 59
STRING (283) 23
THEN (284) 91
TRUE (285) 27
VAR (286) 29 30 31
WHEN (287) 61
ASSIGN (288) 18 19 29 31 52
AND (289) 69
OR (290) 70
NOT (291) 71
NOT_EQU (292) 77
LE (293) 73
GE (294) 75
MOD (295) 67
IDENTIFIER (296) 18 19 29 30 31 32 34 37 40 49 52 55 79 83 84 102
INT_NUM (297) 24 33
REAL_NUM (298) 25
STRING_CONSTANTS (299) 26
UMINUS (300)


Nonterminals, with rules where they appear

$accept (60)
    on left: 0
program (61)
    on left: 3, on right: 0
$@1 (62)
    on left: 1, on right: 3
$@2 (63)
    on left: 2, on right: 3
statements (64)
    on left: 4 5, on right: 3 4
statement (65)
    on left: 6 7 8 9, on right: 4 44
declarations (66)
    on left: 10 11, on right: 3 10
declaration_function (67)
    on left: 12 13 14, on right: 10
declaration (68)
    on left: 15 16 17, on right: 12 43
constants (69)
    on left: 18 19, on right: 15
type (70)
    on left: 20 21 22 23, on right: 18 29 30 32 37 49
constant_exp (71)
    on left: 24 25 26 27 28, on right: 18 19 29 31 80
variable (72)
    on left: 29 30 31, on right: 16
array (73)
    on left: 32, on right: 17
number (74)
    on left: 33 34, on right: 32 102
function (75)
    on left: 37, on right: 13
$@3 (76)
    on left: 35, on right: 37
$@4 (77)
    on left: 36, on right: 37
procedure (78)
    on left: 40, on right: 14
$@5 (79)
    on left: 38, on right: 40
$@6 (80)
    on left: 39, on right: 40
function_bodys (81)
    on left: 41 42, on right: 37 40 41 51 91 93 96 102
function_body (82)
    on left: 43 44, on right: 41
parameters_block (83)
    on left: 45 46, on right: 37 40
parameters (84)
    on left: 47 48, on right: 45 47
parameter (85)
    on left: 49, on right: 47 48
block (86)
    on left: 51, on right: 6
$@7 (87)
    on left: 50, on right: 51
simple (88)
    on left: 52 54 55 56 57 58 59 60, on right: 7
$@8 (89)
    on left: 53, on right: 54
when (90)
    on left: 61 62, on right: 58
expression (91)
    on left: 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
    81 82, on right: 52 54 56 61 63 64 65 66 67 68 69 70 71 72 73 74
    75 76 77 78 84 89 91
function_procedure (92)
    on left: 83, on right: 60 81
array_reference (93)
    on left: 84, on right: 82
argument_body (94)
    on left: 85 86, on right: 83
arguments (95)
    on left: 87 88, on right: 85 87
func_expression (96)
    on left: 89, on right: 87 88
if_head (97)
    on left: 91, on right: 93 94
$@9 (98)
    on left: 90, on right: 91
condition (99)
    on left: 93 94, on right: 8
$@10 (100)
    on left: 92, on right: 93
loop (101)
    on left: 96 102, on right: 9
$@11 (102)
    on left: 95, on right: 96
$@12 (103)
    on left: 97, on right: 102
$@13 (104)
    on left: 98, on right: 102
$@14 (105)
    on left: 99, on right: 102
$@15 (106)
    on left: 100, on right: 102
$@16 (107)
    on left: 101, on right: 102
decreasing (108)
    on left: 103 104, on right: 102


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    3 program: $@1 . declarations $@2 statements

    $default  reduce using rule 11 (declarations)

    declarations  go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    3 program: $@1 declarations . $@2 statements
   10 declarations: declarations . declaration_function

    ARRAY      shift, and go to state 5
    CONST      shift, and go to state 6
    FUNCTION   shift, and go to state 7
    PROCEDURE  shift, and go to state 8
    VAR        shift, and go to state 9

    $default  reduce using rule 2 ($@2)

    $@2                   go to state 10
    declaration_function  go to state 11
    declaration           go to state 12
    constants             go to state 13
    variable              go to state 14
    array                 go to state 15
    function              go to state 16
    procedure             go to state 17


State 5

   32 array: ARRAY . IDENTIFIER ':' ARRAY number '.' '.' number OF type

    IDENTIFIER  shift, and go to state 18


State 6

   18 constants: CONST . IDENTIFIER type ASSIGN constant_exp
   19          | CONST . IDENTIFIER ASSIGN constant_exp

    IDENTIFIER  shift, and go to state 19


State 7

   37 function: FUNCTION . IDENTIFIER $@3 '(' parameters_block ')' type $@4 function_bodys END IDENTIFIER

    IDENTIFIER  shift, and go to state 20


State 8

   40 procedure: PROCEDURE . IDENTIFIER $@5 '(' parameters_block ')' $@6 function_bodys END IDENTIFIER

    IDENTIFIER  shift, and go to state 21


State 9

   29 variable: VAR . IDENTIFIER type ASSIGN constant_exp
   30         | VAR . IDENTIFIER type
   31         | VAR . IDENTIFIER ASSIGN constant_exp

    IDENTIFIER  shift, and go to state 22


State 10

    3 program: $@1 declarations $@2 . statements

    $default  reduce using rule 5 (statements)

    statements  go to state 23


State 11

   10 declarations: declarations declaration_function .

    $default  reduce using rule 10 (declarations)


State 12

   12 declaration_function: declaration .

    $default  reduce using rule 12 (declaration_function)


State 13

   15 declaration: constants .

    $default  reduce using rule 15 (declaration)


State 14

   16 declaration: variable .

    $default  reduce using rule 16 (declaration)


State 15

   17 declaration: array .

    $default  reduce using rule 17 (declaration)


State 16

   13 declaration_function: function .

    $default  reduce using rule 13 (declaration_function)


State 17

   14 declaration_function: procedure .

    $default  reduce using rule 14 (declaration_function)


State 18

   32 array: ARRAY IDENTIFIER . ':' ARRAY number '.' '.' number OF type

    ':'  shift, and go to state 24


State 19

   18 constants: CONST IDENTIFIER . type ASSIGN constant_exp
   19          | CONST IDENTIFIER . ASSIGN constant_exp

    ASSIGN  shift, and go to state 25
    ':'     shift, and go to state 26

    type  go to state 27


State 20

   37 function: FUNCTION IDENTIFIER . $@3 '(' parameters_block ')' type $@4 function_bodys END IDENTIFIER

    $default  reduce using rule 35 ($@3)

    $@3  go to state 28


State 21

   40 procedure: PROCEDURE IDENTIFIER . $@5 '(' parameters_block ')' $@6 function_bodys END IDENTIFIER

    $default  reduce using rule 38 ($@5)

    $@5  go to state 29


State 22

   29 variable: VAR IDENTIFIER . type ASSIGN constant_exp
   30         | VAR IDENTIFIER . type
   31         | VAR IDENTIFIER . ASSIGN constant_exp

    ASSIGN  shift, and go to state 30
    ':'     shift, and go to state 26

    type  go to state 31


State 23

    3 program: $@1 declarations $@2 statements .
    4 statements: statements . statement

    BEGIN_      shift, and go to state 32
    EXIT        shift, and go to state 33
    FOR         shift, and go to state 34
    GET         shift, and go to state 35
    IF          shift, and go to state 36
    LOOP        shift, and go to state 37
    PUT         shift, and go to state 38
    RESULT      shift, and go to state 39
    RETURN      shift, and go to state 40
    SKIP        shift, and go to state 41
    IDENTIFIER  shift, and go to state 42

    $default  reduce using rule 3 (program)

    statement           go to state 43
    block               go to state 44
    simple              go to state 45
    function_procedure  go to state 46
    if_head             go to state 47
    condition           go to state 48
    loop                go to state 49


State 24

   32 array: ARRAY IDENTIFIER ':' . ARRAY number '.' '.' number OF type

    ARRAY  shift, and go to state 50


State 25

   19 constants: CONST IDENTIFIER ASSIGN . constant_exp

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55

    constant_exp  go to state 56


State 26

   20 type: ':' . INT
   21     | ':' . REAL
   22     | ':' . BOOL
   23     | ':' . STRING

    BOOL    shift, and go to state 57
    INT     shift, and go to state 58
    REAL    shift, and go to state 59
    STRING  shift, and go to state 60


State 27

   18 constants: CONST IDENTIFIER type . ASSIGN constant_exp

    ASSIGN  shift, and go to state 61


State 28

   37 function: FUNCTION IDENTIFIER $@3 . '(' parameters_block ')' type $@4 function_bodys END IDENTIFIER

    '('  shift, and go to state 62


State 29

   40 procedure: PROCEDURE IDENTIFIER $@5 . '(' parameters_block ')' $@6 function_bodys END IDENTIFIER

    '('  shift, and go to state 63


State 30

   31 variable: VAR IDENTIFIER ASSIGN . constant_exp

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55

    constant_exp  go to state 64


State 31

   29 variable: VAR IDENTIFIER type . ASSIGN constant_exp
   30         | VAR IDENTIFIER type .

    ASSIGN  shift, and go to state 65

    $default  reduce using rule 30 (variable)


State 32

   51 block: BEGIN_ . $@7 function_bodys END

    $default  reduce using rule 50 ($@7)

    $@7  go to state 66


State 33

   58 simple: EXIT . when

    WHEN  shift, and go to state 67

    $default  reduce using rule 62 (when)

    when  go to state 68


State 34

  102 loop: FOR . decreasing $@12 IDENTIFIER $@13 ':' number $@14 '.' '.' number $@15 function_bodys $@16 END FOR

    DECREASING  shift, and go to state 69

    $default  reduce using rule 104 (decreasing)

    decreasing  go to state 70


State 35

   55 simple: GET . IDENTIFIER

    IDENTIFIER  shift, and go to state 71


State 36

   91 if_head: IF . expression THEN $@9 function_bodys

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 77
    function_procedure  go to state 78
    array_reference     go to state 79


State 37

   96 loop: LOOP . $@11 function_bodys END LOOP

    $default  reduce using rule 95 ($@11)

    $@11  go to state 80


State 38

   54 simple: PUT . $@8 expression

    $default  reduce using rule 53 ($@8)

    $@8  go to state 81


State 39

   56 simple: RESULT . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 82
    function_procedure  go to state 78
    array_reference     go to state 79


State 40

   57 simple: RETURN .

    $default  reduce using rule 57 (simple)


State 41

   59 simple: SKIP .

    $default  reduce using rule 59 (simple)


State 42

   52 simple: IDENTIFIER . ASSIGN expression
   83 function_procedure: IDENTIFIER . '(' argument_body ')'

    ASSIGN  shift, and go to state 83
    '('     shift, and go to state 84


State 43

    4 statements: statements statement .

    $default  reduce using rule 4 (statements)


State 44

    6 statement: block .

    $default  reduce using rule 6 (statement)


State 45

    7 statement: simple .

    $default  reduce using rule 7 (statement)


State 46

   60 simple: function_procedure .

    $default  reduce using rule 60 (simple)


State 47

   93 condition: if_head . ELSE $@10 function_bodys END IF
   94          | if_head . END IF

    ELSE  shift, and go to state 85
    END   shift, and go to state 86


State 48

    8 statement: condition .

    $default  reduce using rule 8 (statement)


State 49

    9 statement: loop .

    $default  reduce using rule 9 (statement)


State 50

   32 array: ARRAY IDENTIFIER ':' ARRAY . number '.' '.' number OF type

    IDENTIFIER  shift, and go to state 87
    INT_NUM     shift, and go to state 88

    number  go to state 89


State 51

   28 constant_exp: FALSE .

    $default  reduce using rule 28 (constant_exp)


State 52

   27 constant_exp: TRUE .

    $default  reduce using rule 27 (constant_exp)


State 53

   24 constant_exp: INT_NUM .

    $default  reduce using rule 24 (constant_exp)


State 54

   25 constant_exp: REAL_NUM .

    $default  reduce using rule 25 (constant_exp)


State 55

   26 constant_exp: STRING_CONSTANTS .

    $default  reduce using rule 26 (constant_exp)


State 56

   19 constants: CONST IDENTIFIER ASSIGN constant_exp .

    $default  reduce using rule 19 (constants)


State 57

   22 type: ':' BOOL .

    $default  reduce using rule 22 (type)


State 58

   20 type: ':' INT .

    $default  reduce using rule 20 (type)


State 59

   21 type: ':' REAL .

    $default  reduce using rule 21 (type)


State 60

   23 type: ':' STRING .

    $default  reduce using rule 23 (type)


State 61

   18 constants: CONST IDENTIFIER type ASSIGN . constant_exp

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55

    constant_exp  go to state 90


State 62

   37 function: FUNCTION IDENTIFIER $@3 '(' . parameters_block ')' type $@4 function_bodys END IDENTIFIER

    IDENTIFIER  shift, and go to state 91

    $default  reduce using rule 46 (parameters_block)

    parameters_block  go to state 92
    parameters        go to state 93
    parameter         go to state 94


State 63

   40 procedure: PROCEDURE IDENTIFIER $@5 '(' . parameters_block ')' $@6 function_bodys END IDENTIFIER

    IDENTIFIER  shift, and go to state 91

    $default  reduce using rule 46 (parameters_block)

    parameters_block  go to state 95
    parameters        go to state 93
    parameter         go to state 94


State 64

   31 variable: VAR IDENTIFIER ASSIGN constant_exp .

    $default  reduce using rule 31 (variable)


State 65

   29 variable: VAR IDENTIFIER type ASSIGN . constant_exp

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55

    constant_exp  go to state 96


State 66

   51 block: BEGIN_ $@7 . function_bodys END

    $default  reduce using rule 42 (function_bodys)

    function_bodys  go to state 97


State 67

   61 when: WHEN . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 98
    function_procedure  go to state 78
    array_reference     go to state 79


State 68

   58 simple: EXIT when .

    $default  reduce using rule 58 (simple)


State 69

  103 decreasing: DECREASING .

    $default  reduce using rule 103 (decreasing)


State 70

  102 loop: FOR decreasing . $@12 IDENTIFIER $@13 ':' number $@14 '.' '.' number $@15 function_bodys $@16 END FOR

    $default  reduce using rule 97 ($@12)

    $@12  go to state 99


State 71

   55 simple: GET IDENTIFIER .

    $default  reduce using rule 55 (simple)


State 72

   71 expression: NOT . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 100
    function_procedure  go to state 78
    array_reference     go to state 79


State 73

   79 expression: IDENTIFIER .
   83 function_procedure: IDENTIFIER . '(' argument_body ')'
   84 array_reference: IDENTIFIER . '[' expression ']'

    '('  shift, and go to state 84
    '['  shift, and go to state 101

    $default  reduce using rule 79 (expression)


State 74

   68 expression: '-' . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 102
    function_procedure  go to state 78
    array_reference     go to state 79


State 75

   78 expression: '(' . expression ')'

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 103
    function_procedure  go to state 78
    array_reference     go to state 79


State 76

   80 expression: constant_exp .

    $default  reduce using rule 80 (expression)


State 77

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression
   91 if_head: IF expression . THEN $@9 function_bodys

    THEN     shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117


State 78

   81 expression: function_procedure .

    $default  reduce using rule 81 (expression)


State 79

   82 expression: array_reference .

    $default  reduce using rule 82 (expression)


State 80

   96 loop: LOOP $@11 . function_bodys END LOOP

    $default  reduce using rule 42 (function_bodys)

    function_bodys  go to state 118


State 81

   54 simple: PUT $@8 . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 119
    function_procedure  go to state 78
    array_reference     go to state 79


State 82

   56 simple: RESULT expression .
   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    AND      shift, and go to state 105
    OR       shift, and go to state 106
    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117

    $default  reduce using rule 56 (simple)


State 83

   52 simple: IDENTIFIER ASSIGN . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 120
    function_procedure  go to state 78
    array_reference     go to state 79


State 84

   83 function_procedure: IDENTIFIER '(' . argument_body ')'

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    $default  reduce using rule 86 (argument_body)

    constant_exp        go to state 76
    expression          go to state 121
    function_procedure  go to state 78
    array_reference     go to state 79
    argument_body       go to state 122
    arguments           go to state 123
    func_expression     go to state 124


State 85

   93 condition: if_head ELSE . $@10 function_bodys END IF

    $default  reduce using rule 92 ($@10)

    $@10  go to state 125


State 86

   94 condition: if_head END . IF

    IF  shift, and go to state 126


State 87

   34 number: IDENTIFIER .

    $default  reduce using rule 34 (number)


State 88

   33 number: INT_NUM .

    $default  reduce using rule 33 (number)


State 89

   32 array: ARRAY IDENTIFIER ':' ARRAY number . '.' '.' number OF type

    '.'  shift, and go to state 127


State 90

   18 constants: CONST IDENTIFIER type ASSIGN constant_exp .

    $default  reduce using rule 18 (constants)


State 91

   49 parameter: IDENTIFIER . type

    ':'  shift, and go to state 26

    type  go to state 128


State 92

   37 function: FUNCTION IDENTIFIER $@3 '(' parameters_block . ')' type $@4 function_bodys END IDENTIFIER

    ')'  shift, and go to state 129


State 93

   45 parameters_block: parameters .
   47 parameters: parameters . ',' parameter

    ','  shift, and go to state 130

    $default  reduce using rule 45 (parameters_block)


State 94

   48 parameters: parameter .

    $default  reduce using rule 48 (parameters)


State 95

   40 procedure: PROCEDURE IDENTIFIER $@5 '(' parameters_block . ')' $@6 function_bodys END IDENTIFIER

    ')'  shift, and go to state 131


State 96

   29 variable: VAR IDENTIFIER type ASSIGN constant_exp .

    $default  reduce using rule 29 (variable)


State 97

   41 function_bodys: function_bodys . function_body
   51 block: BEGIN_ $@7 function_bodys . END

    ARRAY       shift, and go to state 5
    BEGIN_      shift, and go to state 32
    CONST       shift, and go to state 6
    END         shift, and go to state 132
    EXIT        shift, and go to state 33
    FOR         shift, and go to state 34
    GET         shift, and go to state 35
    IF          shift, and go to state 36
    LOOP        shift, and go to state 37
    PUT         shift, and go to state 38
    RESULT      shift, and go to state 39
    RETURN      shift, and go to state 40
    SKIP        shift, and go to state 41
    VAR         shift, and go to state 9
    IDENTIFIER  shift, and go to state 42

    statement           go to state 133
    declaration         go to state 134
    constants           go to state 13
    variable            go to state 14
    array               go to state 15
    function_body       go to state 135
    block               go to state 44
    simple              go to state 45
    function_procedure  go to state 46
    if_head             go to state 47
    condition           go to state 48
    loop                go to state 49


State 98

   61 when: WHEN expression .
   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    AND      shift, and go to state 105
    OR       shift, and go to state 106
    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117

    $default  reduce using rule 61 (when)


State 99

  102 loop: FOR decreasing $@12 . IDENTIFIER $@13 ':' number $@14 '.' '.' number $@15 function_bodys $@16 END FOR

    IDENTIFIER  shift, and go to state 136


State 100

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   71           | NOT expression .
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117

    $default  reduce using rule 71 (expression)


State 101

   84 array_reference: IDENTIFIER '[' . expression ']'

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 137
    function_procedure  go to state 78
    array_reference     go to state 79


State 102

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   68           | '-' expression .
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    $default  reduce using rule 68 (expression)


State 103

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression
   78           | '(' expression . ')'

    AND      shift, and go to state 105
    OR       shift, and go to state 106
    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117
    ')'      shift, and go to state 138


State 104

   91 if_head: IF expression THEN . $@9 function_bodys

    $default  reduce using rule 90 ($@9)

    $@9  go to state 139


State 105

   69 expression: expression AND . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 140
    function_procedure  go to state 78
    array_reference     go to state 79


State 106

   70 expression: expression OR . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 141
    function_procedure  go to state 78
    array_reference     go to state 79


State 107

   77 expression: expression NOT_EQU . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 142
    function_procedure  go to state 78
    array_reference     go to state 79


State 108

   73 expression: expression LE . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 143
    function_procedure  go to state 78
    array_reference     go to state 79


State 109

   75 expression: expression GE . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 144
    function_procedure  go to state 78
    array_reference     go to state 79


State 110

   67 expression: expression MOD . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 145
    function_procedure  go to state 78
    array_reference     go to state 79


State 111

   72 expression: expression '<' . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 146
    function_procedure  go to state 78
    array_reference     go to state 79


State 112

   74 expression: expression '=' . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 147
    function_procedure  go to state 78
    array_reference     go to state 79


State 113

   76 expression: expression '>' . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 148
    function_procedure  go to state 78
    array_reference     go to state 79


State 114

   63 expression: expression '+' . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 149
    function_procedure  go to state 78
    array_reference     go to state 79


State 115

   64 expression: expression '-' . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 150
    function_procedure  go to state 78
    array_reference     go to state 79


State 116

   65 expression: expression '*' . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 151
    function_procedure  go to state 78
    array_reference     go to state 79


State 117

   66 expression: expression '/' . expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 152
    function_procedure  go to state 78
    array_reference     go to state 79


State 118

   41 function_bodys: function_bodys . function_body
   96 loop: LOOP $@11 function_bodys . END LOOP

    ARRAY       shift, and go to state 5
    BEGIN_      shift, and go to state 32
    CONST       shift, and go to state 6
    END         shift, and go to state 153
    EXIT        shift, and go to state 33
    FOR         shift, and go to state 34
    GET         shift, and go to state 35
    IF          shift, and go to state 36
    LOOP        shift, and go to state 37
    PUT         shift, and go to state 38
    RESULT      shift, and go to state 39
    RETURN      shift, and go to state 40
    SKIP        shift, and go to state 41
    VAR         shift, and go to state 9
    IDENTIFIER  shift, and go to state 42

    statement           go to state 133
    declaration         go to state 134
    constants           go to state 13
    variable            go to state 14
    array               go to state 15
    function_body       go to state 135
    block               go to state 44
    simple              go to state 45
    function_procedure  go to state 46
    if_head             go to state 47
    condition           go to state 48
    loop                go to state 49


State 119

   54 simple: PUT $@8 expression .
   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    AND      shift, and go to state 105
    OR       shift, and go to state 106
    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117

    $default  reduce using rule 54 (simple)


State 120

   52 simple: IDENTIFIER ASSIGN expression .
   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    AND      shift, and go to state 105
    OR       shift, and go to state 106
    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117

    $default  reduce using rule 52 (simple)


State 121

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression
   89 func_expression: expression .

    AND      shift, and go to state 105
    OR       shift, and go to state 106
    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117

    $default  reduce using rule 89 (func_expression)


State 122

   83 function_procedure: IDENTIFIER '(' argument_body . ')'

    ')'  shift, and go to state 154


State 123

   85 argument_body: arguments .
   87 arguments: arguments . ',' func_expression

    ','  shift, and go to state 155

    $default  reduce using rule 85 (argument_body)


State 124

   88 arguments: func_expression .

    $default  reduce using rule 88 (arguments)


State 125

   93 condition: if_head ELSE $@10 . function_bodys END IF

    $default  reduce using rule 42 (function_bodys)

    function_bodys  go to state 156


State 126

   94 condition: if_head END IF .

    $default  reduce using rule 94 (condition)


State 127

   32 array: ARRAY IDENTIFIER ':' ARRAY number '.' . '.' number OF type

    '.'  shift, and go to state 157


State 128

   49 parameter: IDENTIFIER type .

    $default  reduce using rule 49 (parameter)


State 129

   37 function: FUNCTION IDENTIFIER $@3 '(' parameters_block ')' . type $@4 function_bodys END IDENTIFIER

    ':'  shift, and go to state 26

    type  go to state 158


State 130

   47 parameters: parameters ',' . parameter

    IDENTIFIER  shift, and go to state 91

    parameter  go to state 159


State 131

   40 procedure: PROCEDURE IDENTIFIER $@5 '(' parameters_block ')' . $@6 function_bodys END IDENTIFIER

    $default  reduce using rule 39 ($@6)

    $@6  go to state 160


State 132

   51 block: BEGIN_ $@7 function_bodys END .

    $default  reduce using rule 51 (block)


State 133

   44 function_body: statement .

    $default  reduce using rule 44 (function_body)


State 134

   43 function_body: declaration .

    $default  reduce using rule 43 (function_body)


State 135

   41 function_bodys: function_bodys function_body .

    $default  reduce using rule 41 (function_bodys)


State 136

  102 loop: FOR decreasing $@12 IDENTIFIER . $@13 ':' number $@14 '.' '.' number $@15 function_bodys $@16 END FOR

    $default  reduce using rule 98 ($@13)

    $@13  go to state 161


State 137

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression
   84 array_reference: IDENTIFIER '[' expression . ']'

    AND      shift, and go to state 105
    OR       shift, and go to state 106
    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117
    ']'      shift, and go to state 162


State 138

   78 expression: '(' expression ')' .

    $default  reduce using rule 78 (expression)


State 139

   91 if_head: IF expression THEN $@9 . function_bodys

    $default  reduce using rule 42 (function_bodys)

    function_bodys  go to state 163


State 140

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   69           | expression AND expression .
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117

    $default  reduce using rule 69 (expression)


State 141

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   70           | expression OR expression .
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    AND      shift, and go to state 105
    NOT_EQU  shift, and go to state 107
    LE       shift, and go to state 108
    GE       shift, and go to state 109
    MOD      shift, and go to state 110
    '<'      shift, and go to state 111
    '='      shift, and go to state 112
    '>'      shift, and go to state 113
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '*'      shift, and go to state 116
    '/'      shift, and go to state 117

    OR  error (nonassociative)

    $default  reduce using rule 70 (expression)


State 142

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression
   77           | expression NOT_EQU expression .

    MOD  shift, and go to state 110
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '*'  shift, and go to state 116
    '/'  shift, and go to state 117

    $default  reduce using rule 77 (expression)


State 143

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   73           | expression LE expression .
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    MOD  shift, and go to state 110
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '*'  shift, and go to state 116
    '/'  shift, and go to state 117

    $default  reduce using rule 73 (expression)


State 144

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   75           | expression GE expression .
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    MOD  shift, and go to state 110
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '*'  shift, and go to state 116
    '/'  shift, and go to state 117

    $default  reduce using rule 75 (expression)


State 145

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   67           | expression MOD expression .
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    $default  reduce using rule 67 (expression)


State 146

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   72           | expression '<' expression .
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    MOD  shift, and go to state 110
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '*'  shift, and go to state 116
    '/'  shift, and go to state 117

    $default  reduce using rule 72 (expression)


State 147

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   74           | expression '=' expression .
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    MOD  shift, and go to state 110
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '*'  shift, and go to state 116
    '/'  shift, and go to state 117

    $default  reduce using rule 74 (expression)


State 148

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   76           | expression '>' expression .
   77           | expression . NOT_EQU expression

    MOD  shift, and go to state 110
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '*'  shift, and go to state 116
    '/'  shift, and go to state 117

    $default  reduce using rule 76 (expression)


State 149

   63 expression: expression . '+' expression
   63           | expression '+' expression .
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    MOD  shift, and go to state 110
    '*'  shift, and go to state 116
    '/'  shift, and go to state 117

    $default  reduce using rule 63 (expression)


State 150

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   64           | expression '-' expression .
   65           | expression . '*' expression
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    MOD  shift, and go to state 110
    '*'  shift, and go to state 116
    '/'  shift, and go to state 117

    $default  reduce using rule 64 (expression)


State 151

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   65           | expression '*' expression .
   66           | expression . '/' expression
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    $default  reduce using rule 65 (expression)


State 152

   63 expression: expression . '+' expression
   64           | expression . '-' expression
   65           | expression . '*' expression
   66           | expression . '/' expression
   66           | expression '/' expression .
   67           | expression . MOD expression
   69           | expression . AND expression
   70           | expression . OR expression
   72           | expression . '<' expression
   73           | expression . LE expression
   74           | expression . '=' expression
   75           | expression . GE expression
   76           | expression . '>' expression
   77           | expression . NOT_EQU expression

    $default  reduce using rule 66 (expression)


State 153

   96 loop: LOOP $@11 function_bodys END . LOOP

    LOOP  shift, and go to state 164


State 154

   83 function_procedure: IDENTIFIER '(' argument_body ')' .

    $default  reduce using rule 83 (function_procedure)


State 155

   87 arguments: arguments ',' . func_expression

    FALSE             shift, and go to state 51
    TRUE              shift, and go to state 52
    NOT               shift, and go to state 72
    IDENTIFIER        shift, and go to state 73
    INT_NUM           shift, and go to state 53
    REAL_NUM          shift, and go to state 54
    STRING_CONSTANTS  shift, and go to state 55
    '-'               shift, and go to state 74
    '('               shift, and go to state 75

    constant_exp        go to state 76
    expression          go to state 121
    function_procedure  go to state 78
    array_reference     go to state 79
    func_expression     go to state 165


State 156

   41 function_bodys: function_bodys . function_body
   93 condition: if_head ELSE $@10 function_bodys . END IF

    ARRAY       shift, and go to state 5
    BEGIN_      shift, and go to state 32
    CONST       shift, and go to state 6
    END         shift, and go to state 166
    EXIT        shift, and go to state 33
    FOR         shift, and go to state 34
    GET         shift, and go to state 35
    IF          shift, and go to state 36
    LOOP        shift, and go to state 37
    PUT         shift, and go to state 38
    RESULT      shift, and go to state 39
    RETURN      shift, and go to state 40
    SKIP        shift, and go to state 41
    VAR         shift, and go to state 9
    IDENTIFIER  shift, and go to state 42

    statement           go to state 133
    declaration         go to state 134
    constants           go to state 13
    variable            go to state 14
    array               go to state 15
    function_body       go to state 135
    block               go to state 44
    simple              go to state 45
    function_procedure  go to state 46
    if_head             go to state 47
    condition           go to state 48
    loop                go to state 49


State 157

   32 array: ARRAY IDENTIFIER ':' ARRAY number '.' '.' . number OF type

    IDENTIFIER  shift, and go to state 87
    INT_NUM     shift, and go to state 88

    number  go to state 167


State 158

   37 function: FUNCTION IDENTIFIER $@3 '(' parameters_block ')' type . $@4 function_bodys END IDENTIFIER

    $default  reduce using rule 36 ($@4)

    $@4  go to state 168


State 159

   47 parameters: parameters ',' parameter .

    $default  reduce using rule 47 (parameters)


State 160

   40 procedure: PROCEDURE IDENTIFIER $@5 '(' parameters_block ')' $@6 . function_bodys END IDENTIFIER

    $default  reduce using rule 42 (function_bodys)

    function_bodys  go to state 169


State 161

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 . ':' number $@14 '.' '.' number $@15 function_bodys $@16 END FOR

    ':'  shift, and go to state 170


State 162

   84 array_reference: IDENTIFIER '[' expression ']' .

    $default  reduce using rule 84 (array_reference)


State 163

   41 function_bodys: function_bodys . function_body
   91 if_head: IF expression THEN $@9 function_bodys .

    ARRAY       shift, and go to state 5
    BEGIN_      shift, and go to state 32
    CONST       shift, and go to state 6
    EXIT        shift, and go to state 33
    FOR         shift, and go to state 34
    GET         shift, and go to state 35
    IF          shift, and go to state 36
    LOOP        shift, and go to state 37
    PUT         shift, and go to state 38
    RESULT      shift, and go to state 39
    RETURN      shift, and go to state 40
    SKIP        shift, and go to state 41
    VAR         shift, and go to state 9
    IDENTIFIER  shift, and go to state 42

    $default  reduce using rule 91 (if_head)

    statement           go to state 133
    declaration         go to state 134
    constants           go to state 13
    variable            go to state 14
    array               go to state 15
    function_body       go to state 135
    block               go to state 44
    simple              go to state 45
    function_procedure  go to state 46
    if_head             go to state 47
    condition           go to state 48
    loop                go to state 49


State 164

   96 loop: LOOP $@11 function_bodys END LOOP .

    $default  reduce using rule 96 (loop)


State 165

   87 arguments: arguments ',' func_expression .

    $default  reduce using rule 87 (arguments)


State 166

   93 condition: if_head ELSE $@10 function_bodys END . IF

    IF  shift, and go to state 171


State 167

   32 array: ARRAY IDENTIFIER ':' ARRAY number '.' '.' number . OF type

    OF  shift, and go to state 172


State 168

   37 function: FUNCTION IDENTIFIER $@3 '(' parameters_block ')' type $@4 . function_bodys END IDENTIFIER

    $default  reduce using rule 42 (function_bodys)

    function_bodys  go to state 173


State 169

   40 procedure: PROCEDURE IDENTIFIER $@5 '(' parameters_block ')' $@6 function_bodys . END IDENTIFIER
   41 function_bodys: function_bodys . function_body

    ARRAY       shift, and go to state 5
    BEGIN_      shift, and go to state 32
    CONST       shift, and go to state 6
    END         shift, and go to state 174
    EXIT        shift, and go to state 33
    FOR         shift, and go to state 34
    GET         shift, and go to state 35
    IF          shift, and go to state 36
    LOOP        shift, and go to state 37
    PUT         shift, and go to state 38
    RESULT      shift, and go to state 39
    RETURN      shift, and go to state 40
    SKIP        shift, and go to state 41
    VAR         shift, and go to state 9
    IDENTIFIER  shift, and go to state 42

    statement           go to state 133
    declaration         go to state 134
    constants           go to state 13
    variable            go to state 14
    array               go to state 15
    function_body       go to state 135
    block               go to state 44
    simple              go to state 45
    function_procedure  go to state 46
    if_head             go to state 47
    condition           go to state 48
    loop                go to state 49


State 170

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' . number $@14 '.' '.' number $@15 function_bodys $@16 END FOR

    IDENTIFIER  shift, and go to state 87
    INT_NUM     shift, and go to state 88

    number  go to state 175


State 171

   93 condition: if_head ELSE $@10 function_bodys END IF .

    $default  reduce using rule 93 (condition)


State 172

   32 array: ARRAY IDENTIFIER ':' ARRAY number '.' '.' number OF . type

    ':'  shift, and go to state 26

    type  go to state 176


State 173

   37 function: FUNCTION IDENTIFIER $@3 '(' parameters_block ')' type $@4 function_bodys . END IDENTIFIER
   41 function_bodys: function_bodys . function_body

    ARRAY       shift, and go to state 5
    BEGIN_      shift, and go to state 32
    CONST       shift, and go to state 6
    END         shift, and go to state 177
    EXIT        shift, and go to state 33
    FOR         shift, and go to state 34
    GET         shift, and go to state 35
    IF          shift, and go to state 36
    LOOP        shift, and go to state 37
    PUT         shift, and go to state 38
    RESULT      shift, and go to state 39
    RETURN      shift, and go to state 40
    SKIP        shift, and go to state 41
    VAR         shift, and go to state 9
    IDENTIFIER  shift, and go to state 42

    statement           go to state 133
    declaration         go to state 134
    constants           go to state 13
    variable            go to state 14
    array               go to state 15
    function_body       go to state 135
    block               go to state 44
    simple              go to state 45
    function_procedure  go to state 46
    if_head             go to state 47
    condition           go to state 48
    loop                go to state 49


State 174

   40 procedure: PROCEDURE IDENTIFIER $@5 '(' parameters_block ')' $@6 function_bodys END . IDENTIFIER

    IDENTIFIER  shift, and go to state 178


State 175

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number . $@14 '.' '.' number $@15 function_bodys $@16 END FOR

    $default  reduce using rule 99 ($@14)

    $@14  go to state 179


State 176

   32 array: ARRAY IDENTIFIER ':' ARRAY number '.' '.' number OF type .

    $default  reduce using rule 32 (array)


State 177

   37 function: FUNCTION IDENTIFIER $@3 '(' parameters_block ')' type $@4 function_bodys END . IDENTIFIER

    IDENTIFIER  shift, and go to state 180


State 178

   40 procedure: PROCEDURE IDENTIFIER $@5 '(' parameters_block ')' $@6 function_bodys END IDENTIFIER .

    $default  reduce using rule 40 (procedure)


State 179

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number $@14 . '.' '.' number $@15 function_bodys $@16 END FOR

    '.'  shift, and go to state 181


State 180

   37 function: FUNCTION IDENTIFIER $@3 '(' parameters_block ')' type $@4 function_bodys END IDENTIFIER .

    $default  reduce using rule 37 (function)


State 181

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number $@14 '.' . '.' number $@15 function_bodys $@16 END FOR

    '.'  shift, and go to state 182


State 182

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number $@14 '.' '.' . number $@15 function_bodys $@16 END FOR

    IDENTIFIER  shift, and go to state 87
    INT_NUM     shift, and go to state 88

    number  go to state 183


State 183

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number $@14 '.' '.' number . $@15 function_bodys $@16 END FOR

    $default  reduce using rule 100 ($@15)

    $@15  go to state 184


State 184

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number $@14 '.' '.' number $@15 . function_bodys $@16 END FOR

    $default  reduce using rule 42 (function_bodys)

    function_bodys  go to state 185


State 185

   41 function_bodys: function_bodys . function_body
  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number $@14 '.' '.' number $@15 function_bodys . $@16 END FOR

    ARRAY       shift, and go to state 5
    BEGIN_      shift, and go to state 32
    CONST       shift, and go to state 6
    EXIT        shift, and go to state 33
    FOR         shift, and go to state 34
    GET         shift, and go to state 35
    IF          shift, and go to state 36
    LOOP        shift, and go to state 37
    PUT         shift, and go to state 38
    RESULT      shift, and go to state 39
    RETURN      shift, and go to state 40
    SKIP        shift, and go to state 41
    VAR         shift, and go to state 9
    IDENTIFIER  shift, and go to state 42

    $default  reduce using rule 101 ($@16)

    statement           go to state 133
    declaration         go to state 134
    constants           go to state 13
    variable            go to state 14
    array               go to state 15
    function_body       go to state 135
    block               go to state 44
    simple              go to state 45
    function_procedure  go to state 46
    if_head             go to state 47
    condition           go to state 48
    loop                go to state 49
    $@16                go to state 186


State 186

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number $@14 '.' '.' number $@15 function_bodys $@16 . END FOR

    END  shift, and go to state 187


State 187

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number $@14 '.' '.' number $@15 function_bodys $@16 END . FOR

    FOR  shift, and go to state 188


State 188

  102 loop: FOR decreasing $@12 IDENTIFIER $@13 ':' number $@14 '.' '.' number $@15 function_bodys $@16 END FOR .

    $default  reduce using rule 102 (loop)
